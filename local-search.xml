<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>浏览器渲染原理</title>
    <link href="/limoam/1305.html"/>
    <url>/limoam/1305.html</url>
    
    <content type="html"><![CDATA[<h2 id="浏览器是如何渲染页面的？"><a href="#浏览器是如何渲染页面的？" class="headerlink" title="浏览器是如何渲染页面的？"></a>浏览器是如何渲染页面的？</h2><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307231744172.png" alt="image-20230723174402064"></p><blockquote><p> 当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307231745455.png" alt="image-20230723174502402"></p><br /><blockquote><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723175728602.png" alt="image-20230723175728602"></p><br /><h3 id="渲染的第一步是解析-HTML。"><a href="#渲染的第一步是解析-HTML。" class="headerlink" title="渲染的第一步是解析 HTML。"></a>渲染的第一步是<strong>解析 HTML</strong>。</h3><blockquote><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p></blockquote><blockquote><p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180008222.png" alt="image-20230723180008222"></p><blockquote><p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180037817.png" alt="image-20230723180037817"></p><blockquote><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723175905655.png" alt="image-20230723175905655"></p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723175936479.png" alt="image-20230723175936479"></p><br /><h3 id="渲染的下一步是样式计算。"><a href="#渲染的下一步是样式计算。" class="headerlink" title="渲染的下一步是样式计算。"></a>渲染的下一步是<strong>样式计算</strong>。</h3><blockquote><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p></blockquote><blockquote><p>这一步完成后，会得到一棵带有样式的 DOM 树。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180138036.png" alt="image-20230723180138036"></p><br /><h3 id="接下来是布局，布局完成后会得到布局树。"><a href="#接下来是布局，布局完成后会得到布局树。" class="headerlink" title="接下来是布局，布局完成后会得到布局树。"></a>接下来是<strong>布局</strong>，布局完成后会得到布局树。</h3><blockquote><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应。</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180307492.png" alt="image-20230723180307492"></p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180358242.png" alt="image-20230723180358242"></p><br /><h3 id="下一步是分层"><a href="#下一步是分层" class="headerlink" title="下一步是分层"></a>下一步是<strong>分层</strong></h3><blockquote><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180419700.png" alt="image-20230723180419700"></p><blockquote><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p></blockquote><br /><h3 id="再下一步是绘制"><a href="#再下一步是绘制" class="headerlink" title="再下一步是绘制"></a>再下一步是<strong>绘制</strong></h3><blockquote><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180442524.png" alt="image-20230723180442524"></p><br /><h3 id="完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。"><a href="#完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。" class="headerlink" title="完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。"></a>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</h3><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180520089.png" alt="image-20230723180520089"></p><blockquote><p>合成线程首先对每个图层进行<strong>分块</strong>，将其划分为更多的小区域。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180547082.png" alt="image-20230723180547082"></p><blockquote><p>它会从线程池中拿取多个线程来完成分块工作。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180606770.png" alt="image-20230723180606770"></p><br /><h3 id="分块完成后，进入光栅化阶段。"><a href="#分块完成后，进入光栅化阶段。" class="headerlink" title="分块完成后，进入光栅化阶段。"></a>分块完成后，进入<strong>光栅化</strong>阶段。</h3><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180636823.png" alt="image-20230723180636823"></p><blockquote><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180655962.png" alt="image-20230723180655962"></p><blockquote><p>光栅化的结果，就是一块一块的位图</p></blockquote><br /><h3 id="最后一个阶段就是画了"><a href="#最后一个阶段就是画了" class="headerlink" title="最后一个阶段就是画了"></a>最后一个阶段就是<strong>画</strong>了</h3><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/image-20230723180724913.png" alt="image-20230723180724913"></p><blockquote><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p></blockquote><br /><h2 id="什么是-reflow？"><a href="#什么是-reflow？" class="headerlink" title="什么是 reflow？"></a>什么是 reflow？</h2><blockquote><p>reflow 的本质就是重新计算 layout 树。</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><p>浏览器在反复权衡下，最终决定获取属性立即 reflow。</p></blockquote><h2 id="什么是-repaint？"><a href="#什么是-repaint？" class="headerlink" title="什么是 repaint？"></a>什么是 repaint？</h2><blockquote><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p></blockquote><h2 id="为什么-transform-的效率高？"><a href="#为什么-transform-的效率高？" class="headerlink" title="为什么 transform 的效率高？"></a>为什么 transform 的效率高？</h2><blockquote><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器基础原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重新看待JS事件循环</title>
    <link href="/limoam/29325.html"/>
    <url>/limoam/29325.html</url>
    
    <content type="html"><![CDATA[<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><h2 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h2><h3 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a>何为进程？</h3><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230957513.png" alt="image-20220809210859457"></p><p>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意</p><br /><h3 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a>何为线程？</h3><p>有了进程后，就可以运行程序的代码了。</p><p>运行代码的「人」称之为「线程」。</p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。</p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。<img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230958236.png" alt="image-20220809210859457"></p><br /><h3 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h3><p><strong>浏览器是一个多进程多线程的应用程序</strong></p><p>浏览器内部工作极其复杂。</p><p>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230958714.png" alt="image-20220809213152371"></p><blockquote><p>可以在浏览器的任务管理器中查看当前的所有进程</p></blockquote><p>其中，最主要的进程有：</p><ol><li><p>浏览器进程</p><p>主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>网络进程</p><p>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p></li><li><p><strong>渲染进程</strong>（本节课重点讲解的进程）</p><p>渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责执行 HTML、CSS、JS 代码。</p><p>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p><blockquote><p>将来该默认模式可能会有所改变，有兴趣的同学可参见<a href="https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#Modes-and-Availability">chrome 官方说明文档</a></p></blockquote></li></ol><br /><h2 id="渲染主线程是如何工作的？"><a href="#渲染主线程是如何工作的？" class="headerlink" title="渲染主线程是如何工作的？"></a>渲染主线程是如何工作的？</h2><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面画 60 次</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>……</li></ul><blockquote><p>思考题：为什么渲染进程不适用多个线程来处理这些事情？</p></blockquote><p>要处理这么多的任务，主线程遇到了一个前所未有的难题：如何调度任务？</p><p>比如：</p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？</li><li>我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？</li><li>浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪一个呢？</li><li>……</li></ul><p>渲染主线程想出了一个绝妙的主意来处理这个问题：排队</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230958785.png" alt="image-20220809223027806"></p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p>这样一来，就可以让每个任务有条不紊的、持续的进行下去了。</p><p><strong>整个过程，被称之为事件循环（消息循环）</strong></p><br /><h2 id="若干解释"><a href="#若干解释" class="headerlink" title="若干解释"></a>若干解释</h2><h3 id="何为异步？"><a href="#何为异步？" class="headerlink" title="何为异步？"></a>何为异步？</h3><p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p><ul><li>计时完成后需要执行的任务 —— <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>Fetch</code></li><li>用户操作后需要执行的任务 – <code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230958439.png" alt="image-20220810104344296"></p><p><strong>渲染主线程承担着极其重要的工作，无论如何都不能阻塞！</strong></p><p>因此，浏览器选择<strong>异步</strong>来解决这个问题</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/event-loop/202307230958496.png" alt="image-20220810104858857"></p><p>使用异步的方式，<strong>渲染主线程永不阻塞</strong></p><blockquote><p>如何理解 JS 的异步？</p><p>JS 是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p><p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></blockquote><br /><h3 id="JS-为何会阻碍渲染？"><a href="#JS-为何会阻碍渲染？" class="headerlink" title="JS 为何会阻碍渲染？"></a>JS 为何会阻碍渲染？</h3><p>先看代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Mr.Yuan is awesome!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> h1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;h1&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 死循环指定的时间</span></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">duration</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> start = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()</span><br><span class="language-javascript">    <span class="hljs-keyword">while</span> (<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>() - start &lt; duration) &#123;&#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">  btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    h1.<span class="hljs-property">textContent</span> = <span class="hljs-string">&#x27;袁老师很帅！&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-title function_">delay</span>(<span class="hljs-number">3000</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击按钮后，会发生什么呢？</p><ul><li><p>首先当我们点击按钮的时候，会执行函数回调</p></li><li><p>当执行函数会掉时可以看到页面会卡顿 3 秒左右页面才会显示</p></li><li><p>这是由于先执行了修改 h1 内容的代码，这时 h1 内容已经发生改变，但未什么界面没有立即发生变化呢？</p><ol><li>触发的事件是个回调函数，一个函数是一“任务”，只有当函数内全部执行完成才会执行其他任务，比如渲染任务等；</li><li>修改完 h1 后这时候会触发死循，根据传入的参数执行相应次数，这时页面进入了类似“卡顿”的状态，但这并不是渲染主线程阻塞，只是在渲染主线程中正在执行 JS 死循环的任务，阻碍了渲染任务；</li><li>当 3 秒过后主线程 JS 执行完毕，这时候才把渲染任务等放入渲染主线程中执行，这便是为什么 JS 会阻碍页面渲染。</li></ol></li></ul><br /><h3 id="任务有优先级吗？"><a href="#任务有优先级吗？" class="headerlink" title="任务有优先级吗？"></a>任务有优先级吗？</h3><p>任务没有优先级，在消息队列中先进先出</p><p>但<strong>消息队列是有优先级的</strong></p><p>根据 W3C 的最新解释:</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p></blockquote><p>在目前 chrome 的实现中，至少包含了下面的队列：</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li><li>微队列：用户存放需要最快执行的任务，优先级「最高」</li></ul><br /><blockquote><p>添加任务到微队列的主要方式主要是使用 Promise、MutationObserver</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 立即把一个函数添加到微队列</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(函数)<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>浏览器还有很多其他的队列，由于和我们开发关系不大，不作考虑</p></blockquote><br /><blockquote><p>总结：JS 的事件循环</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></blockquote><br /><blockquote><p>问：JS 中的计时器能做到精确计时吗？为什么？</p><p>不行，因为：</p><ol><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>浏览器基础原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端前置知识</title>
    <link href="/limoam/14212.html"/>
    <url>/limoam/14212.html</url>
    
    <content type="html"><![CDATA[<h1 id="浏览器渲染引擎"><a href="#浏览器渲染引擎" class="headerlink" title="浏览器渲染引擎"></a>浏览器渲染引擎</h1><ul><li><p>浏览器最核心的部分是<strong>渲染引擎</strong>，也称<strong>浏览器内核</strong></p><ul><li>负责<strong>解析网页语法</strong>，并<strong>渲染（显示）网页</strong></li></ul></li></ul><br /><ul><li><p>常见浏览器内核：</p><ul><li><p><strong>Trident</strong>（三叉戟）：IE、360安全浏览器、搜狗高速浏览器、百度浏览器、UC浏览器</p></li><li><p><strong>Gecko</strong>（壁虎）：Mozilla Firefox</p></li><li><p><strong>Presto</strong>（急板乐曲）–&gt;  <strong>Blink</strong>（眨眼）：Opera</p></li><li><p><strong>Webkit</strong>  ：Safari、360极速浏览器、搜狗高速浏览器、移动端浏览器</p></li><li><p><strong>Webkit</strong> –&gt; <strong>Blink</strong> :  Google Chrome</p></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241019677.png" alt="image-20230724101939597"></p><ul><li>不同浏览器内核有不同解析、渲染规则，所以同一网页在不同内核浏览器渲染效果也可能不同</li></ul><br /><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul><li><p>是一种用于创建<strong>网页</strong>的<strong>标记语言</strong></p></li><li><p>什么是标记语言？</p><ol><li><p>由无数个<strong>标记（标签、Tag）</strong>组成</p></li><li><p>是对某些特殊内容进行特殊的标记，以供其他<strong>解释器识别处理</strong></p></li><li><p>比如说使用<code>&lt;h1&gt;&lt;/h1&gt;</code>标记的文本会被识别为“<strong>标题</strong>”，进行<strong>加粗、文字放大</strong>显示</p></li><li><p>由<strong>标签和内容</strong>组成的部分被称为<strong>元素（element）</strong></p></li></ol></li></ul><br /><ul><li><p>什么是超文本（HyperText）呢？</p><ul><li><p>不仅可以插入普通的文本，还可以插入<strong>图片、视频、音频</strong>等内容</p></li><li><p>还可以表示<strong>超链接（HyperText）</strong>，从一个网页跳转到另一个网页</p></li></ul></li></ul><br /><ul><li><p>HTML文件的拓展名是**.htm和.html**</p><ul><li><p>历史遗留问题，win95&#x2F;win98系统文件扩展名不能超过3位</p></li><li><p>现在统一使用**.html**</p></li></ul></li></ul><br /><ul><li>一个HTML元素由标签、内容、属性构成，元素之间由父子、兄弟关系</li><li>一个完整的HTML文档由文档声明<code>&lt;!DOCTYPE html&gt;</code>与<strong>HTML元素</strong>组成</li></ul><br /><ul><li><p><code>&lt;!DOCTYPE html&gt;</code>用于声明文档类型，文档版本（DocumentType）</p><ul><li>告诉浏览器是HTML5页面</li><li>让浏览器用HTML5的标准去解析识别内容</li><li>必须放在HTML文档的最前面，不能省略，省略会出现兼容性问题</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241022425.png" alt="image-20230724102246371"></p><br /><ul><li><p>W3C标准建议为html元素增加一个<strong>lang属性</strong></p><ul><li>作用是帮助<strong>语音合成工具</strong>确定要使用的发音</li><li>帮助<strong>翻译工具</strong>确定要使用的翻译规则</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241024702.png" alt="image-20230724102412665"></p><br /><ul><li><p>HTML head元素规定<strong>文档相关配置信息（也成为元数据）</strong>，包括<strong>文档的个标题</strong>、<strong>引用的文档样式</strong>、<strong>文档脚本</strong>等，可以理解为对整个页面的配置。</p><ul><li><p>网页的标题，<code>&lt;title&gt;&lt;/title&gt;</code>元素</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241025500.png" alt="image-20230724102540457"></p></li><li><p><code>&lt;meta&gt;</code>元素</p><ul><li><p>可以设置网页的字符编码，让浏览器更精准的显示每一个文字，<strong>不设置或设置错误会导致乱码</strong></p></li><li><p>一般使用<strong>utf-8编码</strong>，涵盖世界上几乎所有文字</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241026638.png" alt="image-20230724102603602"></p></li></ul></li></ul></li><li><p>标题元素（heading）h1—-h6，浏览器如何区分（呈现时）：通过css默认样式表</p></li></ul><br /><ul><li><p><code>&lt;img&gt;</code>alt属性：</p><ul><li><p>图片加载不成功显示这段文本</p></li><li><p>屏幕阅读器会将这些描述读给需要使用阅读器的使用者听，让他们知道图像的含义</p></li><li><p>搭建服务器的页面img的src无法使用file协议绝对路径找到图片</p><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241027275.png" alt="image-20230724102720216"></p></li></ul></li></ul><br /><ul><li><p>a链接可以指向压缩包文件、指向其他协议地址等</p><ul><li><p><code>&lt;a href=&quot;mailto:123@qq.com&quot;&gt;&lt;/a&gt;</code></p></li><li><p>target属性：<code>_self，_blank，_parent，_top</code></p></li></ul></li></ul><br /><ul><li><p><code>&lt;iframe src=&quot;&quot; frameborder=&quot;0&quot; &gt;&lt;/iframe&gt;</code>元素可以实现在HTML文档中嵌套其他的HTML文档</p><ul><li><p>阻止iframe嵌套网页：rsoponse header 中设置X-Frame-Options: sameotigin(同源)</p></li><li><p>frameborder设置边框：0和1</p></li></ul></li></ul><br /><ul><li><p>div元素、span元素的历史</p><ul><li><p>div元素：division，分开、分配的意思</p></li><li><p>span元素：跨域、涵盖的意思</p></li><li><p>都是纯粹的容器，div用来分隔独立部分，span用于区分特殊文本和普通文本</p></li></ul></li></ul><br /><ul><li>HTML全局属性<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes">全局属性 - HTML（超文本标记语言） | MDN (mozilla.org)</a></li></ul><br /><h1 id="额外知识"><a href="#额外知识" class="headerlink" title="额外知识"></a>额外知识</h1><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><ul><li>由于某些特殊字符浏览器解析会初吻题，比如 “ &lt; ” 浏览器会当作一个标签的符号解析，某些情况下我们确实需要这个符号，这时候可以用字符实体。</li><li>HTML实体是<code>&amp;……;</code>的字符串：<ul><li>常用于显示保留字符（这些字符会被解析为HTML代码）和不可见字符（换行空格等）</li><li>也可以用实体代替其他难以用标准键盘键入的字符</li><li><code>&amp;nbsp;</code>,<code>&amp;lt;</code>,<code>&amp;gt;</code>等</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241029688.png" alt="image-20230724102943624"></p><br /><h2 id="认识URL"><a href="#认识URL" class="headerlink" title="认识URL"></a>认识URL</h2><ul><li><strong>URL</strong>代表着统一资源<strong>定位符</strong>（Uniform Resource Locator）<ul><li><strong>通俗来讲</strong>：URL是一个给定的独特资源在web上的地址</li><li><strong>URL格式</strong>：<code>[协议类型]://[服务器地址]:[端口号]/[文件路径][文件名]?[查询]#[片段ID]</code></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241030712.png" alt="image-20230724103005651"></p><ul><li><strong>URI</strong>代表着统一资源<strong>标识符</strong>，用于标识<strong>Web技术使用的逻辑或物理资源</strong><ul><li><strong>URI在某一个规则下能把一个资源独一无二的识别出来</strong></li><li>URL作为一个网络Web资源的地址，可以唯一将一个资源识别出来，所以URL是一个URI</li><li>所以URL是URI的一个子集</li><li>但是URI并不一定是URL</li></ul></li></ul><br /><h2 id="元素语义化"><a href="#元素语义化" class="headerlink" title="元素语义化"></a>元素语义化</h2><ul><li>意思是用正确的元素做正确的事情</li><li>方便代码维护</li><li>减少让开发者之间沟通的成本</li><li>能够让语音合成工具正确识别网页元素用途，以便做出正确的反应</li><li>有利于seo</li></ul><br /><h2 id="SEO的理解"><a href="#SEO的理解" class="headerlink" title="SEO的理解"></a>SEO的理解</h2><ul><li>搜索引擎优化（英语：search engine optimization，缩写为SEO）是通过了解搜索引擎的运作规则来调整网站，以及提高网站在有关搜索引擎内排名的方式</li></ul><br /><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p><img src="https://cdn.jsdelivr.net/gh/limoam/blog.img/base/202307241030013.png" alt="image-20230724103046973"></p><ul><li><strong>计算机是干什么的?</strong><ul><li>计算机一开始发明出来时是用来解决数字计算问题的，后来人们发现，计算机还可以做更多的事，例如文本处理。</li><li>但计算机其实挺笨的，它只“认识”010110111000…这样由0和1两个数字组成的二进制数字；</li><li>这是因为计算机的底层硬件实现就是用电路的开和闭两种状态来表示0和1两个数字的。</li><li>因此，计算机只可以直接存储和处理二进制数字。</li></ul></li><li>为了在计算机上也<strong>能表示、存储和处理像文字、符号等等之类的字符</strong>，就必须将这些<strong>字符转换成二进制</strong>数字。<ul><li>当然，肯定不是我们想怎么转换就怎么转换，否则就会造成同一段二进制数字在不同计算机上显示出来的字符不一样的情况，</li><li>因此必须得定一个统一的、标准的转换规则</li><li>字符编码的发展历史可以阅读简书一篇文章：<a href="https://www.jianshu.com/p/899e749be47c">https://www.jianshu.com/p/899e749be47c</a></li></ul></li></ul><br /><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><ul><li><p>CSS表示层叠样式表，是为网页添加<strong>样式的代码</strong></p></li><li><p>早期的网页都是<strong>通过HTML来编写</strong>的，但是我们希望<strong>HTML页面可以更加丰富:</strong></p><ul><li>这个时候就增加了很多<strong>具备特殊样式的元素</strong>：比如i、strong、del等等</li><li>后来也有不同的浏览器<strong>实现各自的样式语言</strong>，但是没有统一的规划</li><li>1994年，哈肯·维姆·莱和伯特·波斯<strong>合作设计CSS</strong>，在1996年的时候发布了<strong>CSS1</strong></li><li>直到1997年初，W3C组织才专门<strong>成立了CSS的工作组</strong>，1998年5月发布了<strong>CSS2</strong></li><li>在2006~2009非常流行<strong>“DIV+CSS”布局</strong>的方式来替代所有的html标签</li><li>从CSS3开始，所有的CSS分成了<strong>不同的模块（modules）</strong>，每一个“modules”都有于CSS2中额外增加的功能，以及向后兼容</li><li>直到2011年6月7日，<strong>CSS 3 Color Module</strong>终于发布为W3C Recommendation</li></ul></li><li><blockquote><p> 总结：CSS的出现是<strong>为了美化HTML</strong>的，并且让<strong>结构（HTML）与样式（CSS）分离</strong>；</p></blockquote><ul><li><blockquote><p> 美化方式一：为HTML<strong>添加各种各样的样式</strong>，比如颜色、字体、大小、下划线等等</p></blockquote></li><li><blockquote><p> 美化方式二：对HTML<strong>进行布局</strong>，按照某种结构显示（CSS进行布局 – 浮动、flex、grid）</p></blockquote></li></ul></li></ul><br /><ul><li><p>link元素是<strong>外部资源链</strong>接元素，规范了<strong>文档与外部资源</strong>的关系</p><ul><li><p>放入head标签中</p></li><li><p>css、favicon等</p></li><li><p>有rel（指定链接类型icon、stylesheet、dns-prefetch等）、href（指定被链接资源的URL）</p></li></ul></li></ul><br /><ul><li><p>进制的概念</p><ul><li>维基百科：<strong>进位制</strong>是一种记数方式，亦称<strong>进位计数法</strong>或<strong>位值计数法</strong></li><li>通俗理解：当数字达到某个值时，进一位(比如从1位变成2位)</li></ul></li><li><p>按照上面的来理解，<strong>二进制、八进制、十六进制</strong>：</p><ul><li><p>二进制：当数字到1的时候，用一位已经表示不了了，那么就进一位。</p></li><li><p>八进制：当数字到7的时候，用一位已经表示不了了，那么就进一位。</p></li><li><p>十六进制：等等，用一位如何表示十六个数字呢？a(10)、b(11)、c(12) 、 d(13) 、 e(14) 、 f(15)</p></li></ul></li></ul><br /><h2 id="RGB的表示方法"><a href="#RGB的表示方法" class="headerlink" title="RGB的表示方法"></a><strong>RGB的表示方法</strong></h2><ul><li>RGB颜色可以通过以#为前缀的十六进制字符和函数（rgb()、rgba()）标记表示</li><li><strong>方式一：十六进制符号：</strong>#RRGGBB[AA]<ul><li>R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；A是可选的</li><li>比如，#ff0000等价于#ff0000ff</li></ul></li><li><strong>方式二：十六进制符号：</strong>#RGB[A]   R（红）、G（绿）、B （蓝）和A （alpha）是十六进制字符（0–9、A–F）；<ul><li>三位数符号（#RGB）是六位数形式（#RRGGBB）的减缩版。</li><li>比如，#f09和#ff0099表示同一颜色。</li><li>四位数符号（#RGBA）是八位数形式（#RRGGBBAA）的减缩版。</li><li>比如，#0f38和#00ff3388表示相同颜色。</li></ul></li><li><strong>方式三：函数符：</strong> rgb[a](R, G, B[, A])<ul><li>R（红）、G（绿）、B （蓝）可以是<code>&lt;number&gt;</code>（数字），或者<code>&lt;percentage&gt;</code>（百分比），255相当于100%。</li><li>A（alpha）可以是0到1之间的数字，或者百分比，数字1相当于100%（完全不透明）</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端基础常识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
